---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: instrumenters.appo11y.grafana.com
spec:
  group: appo11y.grafana.com
  names:
    kind: Instrumenter
    listKind: InstrumenterList
    plural: instrumenters
    singular: instrumenter
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Instrumenter is the Schema for the instrumenters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: InstrumenterSpec defines the desired state of Instrumenter
            properties:
              export:
                default:
                - Prometheus
                description: Exporters define the exporter endpoints that the autoinstrumenter
                  must support
                items:
                  description: Exporter type for metrics
                  enum:
                  - Prometheus
                  - OpenTelemetryMetrics
                  - OpenTelemetryTraces
                  type: string
                type: array
              image:
                default: grafana/ebpf-autoinstrument:latest
                description: 'Image allows overriding the autoinstrumenter container
                  image for development purposes TODO: make Image values optional
                  and use relatedImages sections in bundle'
                type: string
              imagePullPolicy:
                default: IfNotPresent
                description: ImagePullPolicy allows overriding the container pull
                  policy for development purposes
                type: string
              openTelemetry:
                default:
                  interval: 5s
                description: OpenTelemetry allows configuring the autoinstrumenter
                  as an OpenTelemetry metrics and traces exporter
                properties:
                  endpoint:
                    description: Endpoint of the OpenTelemetry collector
                    pattern: ^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$
                    type: string
                  insecureSkipVerify:
                    default: false
                    description: InsecureSkipVerify controls whether the instrumenter
                      OTEL client verifies the server's certificate chain and host
                      name. If set to `true`, the OTEL client accepts any certificate
                      presented by the server and any host name in that certificate.
                      In this mode, TLS is susceptible to machine-in-the-middle attacks.
                      This option should be used only for testing and development
                      purposes.
                    type: boolean
                  interval:
                    default: 5s
                    description: Interval is the intervening time between metrics
                      exports
                    type: string
                type: object
              overrideEnv:
                description: OverrideEnv allows overriding the autoinstrumenter env
                  vars for fine-grained configuration
                items:
                  description: EnvVar represents an environment variable present in
                    a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using
                        the previously defined environment variables in the container
                        and any service environment variables. If a variable cannot
                        be resolved, the reference in the input string will be unchanged.
                        Double $$ are reduced to a single $, which allows for escaping
                        the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
                        string literal "$(VAR_NAME)". Escaped references will never
                        be expanded, regardless of whether the variable exists or
                        not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot
                        be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key
                                must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name,
                            metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`,
                            spec.nodeName, spec.serviceAccountName, status.hostIP,
                            status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is
                                written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified
                                API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                          x-kubernetes-map-type: atomic
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only
                            resources limits and requests (limits.cpu, limits.memory,
                            limits.ephemeral-storage, requests.cpu, requests.memory
                            and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes,
                                optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed
                                resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                          x-kubernetes-map-type: atomic
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - name
                  type: object
                type: array
              prometheus:
                default:
                  path: /metrics
                description: Prometheus allows configuring the autoinstrumenter as
                  a Prometheus pull exporter.
                properties:
                  annotations:
                    default:
                      scrape: prometheus.io/scrape
                    properties:
                      path:
                        default: prometheus.io/path
                        type: string
                      port:
                        default: prometheus.io/port
                        type: string
                      scheme:
                        default: prometheus.io/scheme
                        type: string
                      scrape:
                        default: prometheus.io/scrape
                        type: string
                    type: object
                  path:
                    default: /metrics
                    type: string
                  port:
                    default: 9102
                    type: integer
                type: object
              selector:
                default:
                  portLabel: grafana.com/instrument-port
                description: Selector overrides the selection of Pods and executables
                  to instrument
                properties:
                  portLabel:
                    default: grafana.com/instrument-port
                    description: PortLabel specifies which Pod label would specify
                      which executable needs to be instrumented, according to the
                      port it opens. Any pod containing the label would be selected
                      for instrumentation
                    type: string
                type: object
            type: object
          status:
            description: InstrumenterStatus defines the observed state of Instrumenter
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
